/**
 * Class to manage income for Player class
 *
 * @author Jaime Lee
 * Date Created: 9/20/2024
 *
 * @author Jaime Lee
 * Last modified: 11/29/2024
 * Patch Notes:
 *      moved multiplier_array to PlayerData
 */
import java.util.ArrayList;

public class IncomeCalculator
{
    PlayerData player = new PlayerData();

    /**
     * calculateIncome() will calculate the income amount that will be added to the current balance
     * and return the new balance
     * @return final_income - the income after being calculated and rounded to the nearest int
     */
    public long calculateIncome()
    {
        int final_income; // total_income generated in integer form
        double total_income = 0; // for calculating total_income
        ArrayList<Pet> pet_array = player.getPetsOwned();
        double[][] multiplier_array = player.getMultipliers();

        /* for every pet income, add to total_income */
        for(int i = 0; i < pet_array.size(); i++)
        {
            if(pet_array.get(i).isOwned())
            {
                // add income based on pet rarity
                switch(pet_array.get(i).getRarity())
                {
                    case 1:
                        total_income = total_income + 1;
                        break;
                    case 2:
                        total_income = total_income + 2;
                        break;
                    case 3:
                        total_income = total_income + 3;
                        break;
                    case 4:
                        total_income = total_income + 4;
                        break;
                    case 5:
                        total_income = total_income + 5;
                        break;
                    default:
                        System.out.println("An error occured at line 34 of the calculateIncome() switch case.");
                        System.out.println("Interation " + i + " input " + pet_array.get(i) + " into the switch case.");
                }
            }
        }
        /* for every multiplier activated, add multiplied income */
        for(int i = 0; i < multiplier_array.length; i++)
        {
            // if multiplier is activated
            if(multiplier_array[i][2] == 1)
            {
                // total income + the extra income generated by the multiplier
                total_income += (total_income * multiplier_array[i][1]);
            }
        }
        // new_balance = current_balance + total_income rounded up to nearest int
        final_income = (int)Math.ceil(total_income);
        return final_income;
    }
}