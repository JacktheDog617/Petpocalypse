package collegecatnip.petpocalypse.backend;
/**
 * Class to manage income for Player class
 *
 * @author Jaime Lee
 * Date Created: 9/20/2024
 *
 * @author Jaime Lee
 * Last modified: 9/27/2024
 * Patch Notes:
 *      updated to use Pet ArrayList
 *      updated to return income amount, not new balance
 */
import java.util.ArrayList;

public class IncomeCalculator
{
    public double multiplier_array[][] = {
            // item ID....multiplier.....toggle
            {0,      0.05,          0},
            {1,      0.05,          0},
            {2,      0.05,          0},
            {3,      0.05,          0},
            {4,      0.05,          0},
            {5,      0.05,          0},
            {6,      0.05,          0}
    };
    
    PlayerData player = new PlayerData();

    /**
     * calculateIncome() will calculate the income amount that will be added to the current balance
     * and return the new balance
     * @return final_income - the income after being calculated and rounded to the nearest int
     */
    public int calculateIncome()
    {
        int final_income; // total_income generated in integer form
        double total_income = 0; // for calculating total_income
        ArrayList<Pet> pet_array = player.getPetsOwned();

        /* for every pet income, add to total_income */
        for(int i = 0; i < pet_array.size(); i++)
        {
            if(pet_array.get(i).isOwned())
            {
                // add income based on pet rarity
                switch(pet_array.get(i).getRarity())
                {
                    case 1:
                        total_income = total_income + 1;
                        break;
                    case 2:
                        total_income = total_income + 2;
                        break;
                    case 3:
                        total_income = total_income + 3;
                        break;
                    case 4:
                        total_income = total_income + 4;
                        break;
                    case 5:
                        total_income = total_income + 5;
                        break;
                    default:
                        System.out.println("An error occured at line 34 of the calculateIncome() switch case.");
                        System.out.println("Interation " + i + " input " + pet_array.get(i) + " into the switch case.");
                }
            }
        }
        /* for every multiplier activated, add multiplied income */
        for(int i = 0; i < multiplier_array.length; i++)
        {
            // if multiplier is activated
            if(multiplier_array[i][2] == 1)
            {
                // total income + the extra income generated by the multiplier
                total_income += (total_income * multiplier_array[i][1]);
            }
        }
        // new_balance = current_balance + total_income rounded up to nearest int
        final_income = (int)Math.ceil(total_income);
        return final_income;
    }

    /**
     * toggleMultiplier will take in a given item_id and change it's toggle to 1 or 0 according to
     * activate parameter
     * @param item_id - this parameter requires an int or double of the ID of the item to be toggled
     * @param on_off - 1 to toggle on or 0 to toggle off, toggle changes whether or not the item
     *                 is used in income calculations
     * @return 0 if successful, 1 if failed
     */
    public int toggleMultiplier(double item_id, double on_off)
    {
        // do not toggle if on_off is not 1 or 0
        if(on_off!= 1 && on_off != 0)
        {
            System.out.println("Item failed to toggle on/off. on_off = " + on_off);
            return -1; // return failure flag
        }
        // boolean to exit for loop if intended action is completed
        boolean toggle_unfinished = true;
        // loop through array until array end OR multiplier is toggled
        for(int i = 0; (i < multiplier_array.length && toggle_unfinished); i++)
        {
            if(multiplier_array[i][0] == item_id) // check against item ID
            {
                multiplier_array[i][2] = on_off; // switch to 1 or 0
                toggle_unfinished = false; // exit loop
            }
        }
        return 0;// return successful execution flag
    }
}